name: Deploy Supabase Changes

on:
  push:
    branches:
      - edge-functions
    paths:
      - 'server/supabase/functions/**'
      - 'server/supabase/migrations/**'

jobs:
  filter:
    name: Filter Changed Paths
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.filter.outputs.migrations }}
      functions: ${{ steps.filter.outputs.functions }}
    steps:
      - uses: actions/checkout@v3
      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            migrations:
              - 'server/supabase/migrations/**'
            functions:
              - 'server/supabase/functions/**'
      - name: Debug changed files
        run: |
          cat $GITHUB_EVENT_PATH | jq .
          cat $GITHUB_EVENT_PATH | jq '.commits[] | .modified, .added, .removed'
          cat $GITHUB_EVENT_PATH | jq '.head_commit | .modified, .added, .removed'

  apply_migrations:
    name: Apply Database Migrations
    runs-on: ubuntu-latest
    needs: filter
    if: ${{ needs.filter.outputs.migrations == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Authenticate Supabase CLI
        run: npx supabase login --token ${{ secrets.ACCESS_TOKEN }}
        working-directory: server/supabase
      # - name: Remove old config.toml if exists
      #   run: rm -f config.toml
      #   working-directory: server/supabase
      # - name: Initialize Supabase project configuration
      #   run: npx supabase init --force
      #   working-directory: server/supabase
      - name: Link Supabase Project
        run: npx supabase link --project-ref ${{ secrets.PROJECT_ID }}
        working-directory: server/supabase
      - name: Apply Database Migrations
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: npx supabase db push --debug
        working-directory: server/supabase

  deploy_edge_function:
    name: Deploy Edge Function
    runs-on: ubuntu-latest
    needs: filter
    if: ${{ needs.filter.outputs.functions == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Authenticate Supabase CLI
        run: npx supabase login --token ${{ secrets.ACCESS_TOKEN }}
        working-directory: server/supabase
      - name: Link Supabase Project
        run: npx supabase link --project-ref ${{ secrets.PROJECT_ID }}
        working-directory: server/supabase
      - name: Set Supabase secrets
        run: |
          npx supabase secrets set PROJECT_URL="${{ secrets.PROJECT_URL }}"
          npx supabase secrets set ANON_KEY="${{ secrets.ANON_KEY }}"
          npx supabase secrets set ODAI_API_URL="${{ secrets.ODAI_API_URL }}"
          npx supabase secrets set SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
        working-directory: server/supabase
      - name: Deploy Edge Function to Supabase
        run: npx supabase functions deploy reload-odai
        working-directory: server/supabase/functions/reload-odai
